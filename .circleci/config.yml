# CircleCI v2 Config
version: 2.1

######################################################################
#### This is modified circleCI pipeline for testing this demo project.
#### Need to replace with proper one when it goes to MVP phase.
#### Just delete this file add a standard one because this file is
#### modified all over the place for testing purposes.
######################################################################


##
# orbs
#
# Orbs used in this pipeline
##
orbs:
  slack: circleci/slack@4.9.3 # Ref: https://github.com/mojaloop/ci-config/tree/main/slack-templates
  pr-tools: mojaloop/pr-tools@0.1.10 # Ref: https://github.com/mojaloop/ci-config/
  gh: circleci/github-cli@2.1.0
  anchore: anchore/anchore-engine@1.9.0

##
# defaults
#
# YAML defaults templates, in alphabetical order
##
defaults_Dependencies: &defaults_Dependencies |
  apk --no-cache add bash
  apk --no-cache add git
  apk --no-cache add ca-certificates
  apk --no-cache add curl
  apk --no-cache add openssh-client
  apk add --no-cache -t build-dependencies make gcc g++ python3 libtool autoconf automake jq
  apk add --no-cache -t openssl ncurses coreutils libgcc linux-headers grep util-linux binutils findutils
  npm config set unsafe-perm true
  npm install -g node-gyp

defaults_export_version_from_package: &defaults_export_version_from_package
  name: Format the changelog into the github release body and get release tag
  command: |
    git diff --no-indent-heuristic main~1 HEAD CHANGELOG.md | sed -n '/^+[^+]/ s/^+//p' > /tmp/changes
    echo 'export RELEASE_CHANGES=`cat /tmp/changes`' >> $BASH_ENV
    echo 'export RELEASE_TAG=`cat package-lock.json | jq -r .version`' >> $BASH_ENV

defaults_configure_git: &defaults_configure_git
  name: Configure git
  command: |
    git config user.email ${GIT_CI_EMAIL}
    git config user.name ${GIT_CI_USER}

defaults_configure_nvm: &defaults_configure_nvm
  name: Configure NVM
  command: |
    touch $HOME/.profile
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    echo "Installing Node version: $(cat .nvmrc)"
    nvm install $(cat .nvmrc)
    nvm alias default $(cat .nvmrc)
    nvm use $(cat .nvmrc)
        
##
# Executors
#
# CircleCI Executors
##
executors:
  default-docker:
    working_directory: &WORKING_DIR /home/circleci/project
    docker:
      - image: node:16.15.0-alpine # Ref: https://hub.docker.com/_/node?tab=tags&page=1&name=alpine

  default-machine:
    working_directory: *WORKING_DIR
    machine:
      image: ubuntu-2004:current # Ref: https://circleci.com/developer/machine/image/ubuntu-2004

##
# Jobs
#
# A map of CircleCI jobs
##
jobs:
  setup:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run: 
          name: Configure Defaults, NPM Install
          command: |
            source $(pwd)/.circleci/pipeline.sh
            for dir in */; do
              if [ "${dir%-core-connector/}" != "$dir" ]; then
                cd $dir
                defaults_configure_nvm
                npm ci 
                cd -
              fi
            done
      - save_cache:
          key: dependency-cache-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - node_modules

  build-local:
    executor: default-machine
    steps:
      - checkout
      - run: 
         name: Build Docker Local Images
         command: |
            source $(pwd)/.circleci/pipeline.sh
            for dir in */; do
              if [[ $dir == *-core-connector/ ]]; then
                dir_no_slash="${dir%/}"  # Remove trailing slash
                cd "$dir_no_slash" 
                echo "Building Docker image: local"
                docker build -t $DOCKER_ORG/$dir_no_slash:local .
                docker save -o /tmp/$dir_no_slash.tar $DOCKER_ORG/$dir_no_slash:local
                cd -
              fi
            done
      - persist_to_workspace:
          root: /tmp
          paths:
            - ./*.tar

  test-unit:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run: 
          name: Configure Defaults, Execute unit tests
          command: |
            source $(pwd)/.circleci/pipeline.sh
            for dir in */; do
              if [ "${dir%-core-connector/}" != "$dir" ]; then
                cd $dir
                defaults_configure_nvm
                npm ci
                npm run test:unit
                cd -
              fi
            done

      - restore_cache:
          key: dependency-cache-{{ .Environment.CIRCLE_SHA1 }}

  test-functional:
    executor: default-machine
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker local image from workspace
          command: |
            for file in /tmp/*.tar; do
              docker load -i "$file"
            done
      - run: 
          name: Execute Functional Tests
          command: |
            source $(pwd)/.circleci/pipeline.sh
            for dir in */; do
              if [[ $dir == *-core-connector/ ]]; then
                cd $dir 
                cd test/func
                docker-compose up -d
                sleep 10
                cd test/func
                docker-compose -f ./ttk-tests-docker-compose.yml up --abort-on-container-exit
                docker compose down
                cd -
              fi
            done
      - store_artifacts:
          path: ./test/func/reports
          destination: test

  test-dependencies:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run: 
          name: Configure Defaults, Execute Dep Check
          command: |
            source $(pwd)/.circleci/pipeline.sh
            for dir in */; do
              if [ "${dir%-core-connector/}" != "$dir" ]; then
                cd $dir
                defaults_configure_nvm
                npm ci
                npm run dep:check
                cd -
              fi
            done
      - restore_cache:
          key: dependency-cache-{{ .Environment.CIRCLE_SHA1 }}

  test-func:
    executor: default-machine
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run: 
          name: Configure Defaults, Execute integration tests
          command: |
            source $(pwd)/.circleci/pipeline.sh
            for dir in */; do
              if [[ $dir == *-core-connector/ ]]; then
                cd $dir 
                docker-compose -f ./test/func/sdk-docker-compose.yml up -d
                sleep 10
                nvm install
                nvm use
                npm install
                npm run test:int
                docker-compose -f ./test/func/sdk-docker-compose.yml down
                cd -
              fi
            done

  test-lint:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run: 
          name: Configure Defaults, Execute Dep Check
          command: |
            source $(pwd)/.circleci/pipeline.sh
            for dir in */; do
              if [ "${dir%-core-connector/}" != "$dir" ]; then
                cd $dir
                defaults_configure_nvm
                npm ci
                npm run lint
                cd -
              fi
            done
      - restore_cache:
          key: dependency-cache-{{ .Environment.CIRCLE_SHA1 }}

  release:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run: 
          name: Configure Defaults
          command: |
            source $(pwd)/.circleci/pipeline.sh
            for dir in */; do
              if [ "${dir%-core-connector/}" != "$dir" ]; then
                cd $dir
                defaults_configure_nvm
                npm ci
                cd -
              fi
            done
      - restore_cache:
          keys:
          - dependency-cache-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          <<: *defaults_configure_git
      - run: 
          name: Generate changelog and bump package version
          command: |
            git tag -d $(git tag)
            npm run release -- --no-verify
      - run:
          name: Push the release
          command: git push --follow-tags origin ${CIRCLE_BRANCH}

  github-release:
    executor: default-machine
    steps:
      - run:
          name: Install git
          command: |
            sudo apt-get update && sudo apt-get install -y git
      - gh/install
      - checkout
      - run:
          <<: *defaults_configure_git
      - run:
          name: Fetch updated release branch
          command: |
            git fetch origin
            git checkout origin/${CIRCLE_BRANCH}
      - run:
          <<: *defaults_export_version_from_package
      - run:
          name: Check the release changes
          command: |
            echo "Changes are: ${RELEASE_CHANGES}"
      - run:
          name: Create Release
          command: |
            gh release create "v${RELEASE_TAG}" --title "v${RELEASE_TAG} Release" --draft=false --notes "${RELEASE_CHANGES}" ./CHANGELOG.md

  publish:
    executor: default-machine
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker image from workspace
          command: | 
            for file in /tmp/*.tar; do
              docker load -i "$file"
            done
      - run:
          name: Login to Docker Hub
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: 
          name: Tag and Publish Images
          command: |
            source $(pwd)/.circleci/pipeline.sh
            for dir in */; do
              if [[ $dir == *-core-connector/ ]]; then
                dir_no_slash="${dir%/}"  # Remove trailing slash
                cd "$dir_no_slash" 
                echo "export RELEASE_TAG=$RELEASE_TAG_PROD" >> $BASH_ENV
                echo "RELEASE_TAG=$RELEASE_TAG_PROD"

                PACKAGE_VERSION=$(cat package-lock.json | jq -r .version)
                echo "export PACKAGE_VERSION=${PACKAGE_VERSION}" >> $BASH_ENV
                echo "PACKAGE_VERSION=${PACKAGE_VERSION}"
                docker tag $DOCKER_ORG/$dir_no_slash:local $DOCKER_ORG/$dir_no_slash:$CIRCLE_TAG
                docker tag $DOCKER_ORG/$dir_no_slash:local $DOCKER_ORG/$dir_no_slash:$RELEASE_TAG
                echo "Publishing $DOCKER_ORG/$dir_no_slash:$CIRCLE_TAG"
                docker push $DOCKER_ORG/$dir_no_slash:$CIRCLE_TAG
                echo "Publishing $DOCKER_ORG/$dir_no_slash:$RELEASE_TAG"
                docker push $DOCKER_ORG/$dir_no_slash:$RELEASE_TAG
                cd -
              fi
            done

  publish-snapshot:
    executor: default-machine
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker image from workspace
          command: | 
            for file in /tmp/*.tar; do
              docker load -i "$file"
            done
      - run:
          name: Login to Docker Hub
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: 
          name: Tag and Publish Images
          command: |
            source $(pwd)/.circleci/pipeline.sh
            for dir in */; do
              if [[ $dir == *-core-connector/ ]]; then
                dir_no_slash="${dir%/}"  # Remove trailing slash
                cd "$dir_no_slash" 
                echo "export RELEASE_TAG=$RELEASE_TAG_SNAPSHOT" >> $BASH_ENV
                echo "RELEASE_TAG=$RELEASE_TAG_SNAPSHOT"

                PACKAGE_VERSION=$(cat package-lock.json | jq -r .version)
                echo "export PACKAGE_VERSION=${PACKAGE_VERSION}" >> $BASH_ENV
                echo "PACKAGE_VERSION=${PACKAGE_VERSION}"
                docker tag $DOCKER_ORG/$dir_no_slash:local $DOCKER_ORG/$dir_no_slash:$CIRCLE_TAG
                docker tag $DOCKER_ORG/$dir_no_slash:local $DOCKER_ORG/$dir_no_slash:$RELEASE_TAG
                echo "Publishing $DOCKER_ORG/$dir_no_slash:$CIRCLE_TAG"
                docker push $DOCKER_ORG/$dir_no_slash:$CIRCLE_TAG
                echo "Publishing $DOCKER_ORG/$dir_no_slash:$RELEASE_TAG"
                docker push $DOCKER_ORG/$dir_no_slash:$RELEASE_TAG
                cd -
              fi
            done


##
# Workflows
#
# CircleCI Workflow config
##
workflows:
  version: 2
  build_and_test:
    jobs:
      - pr-tools/pr-title-check:
          context: org-global
      - setup:
          context: org-global
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - build-local:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - test-dependencies:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/

      - test-func:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/

      - test-unit:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/

      - test-lint:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/

      # New commits to main release automatically
      - release:
          context: org-global
          requires:
            - pr-tools/pr-title-check
            - test-dependencies
            - test-lint
            - test-unit
          filters:
            branches:
              only:
                - main
                - /release\/v.*/
      - github-release:
          context: org-global
          requires:
            - release
          filters:
            branches:
              only:
                - main
                - /release\/v.*/
      - publish:
          context: org-global
          requires:
            - pr-tools/pr-title-check
            - test-dependencies
            - test-lint
            - test-unit
            - build-local
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              ignore:
                - /.*/
      - publish-snapshot:
          context: org-global
          requires:
            - pr-tools/pr-title-check
            - test-dependencies
            - test-lint
            - test-unit
            - build-local
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*\-snapshot+((\.[0-9]+)?)/
            branches:
              ignore:
                - /.*/